@inject Srs.Service Service
@inject Srs.ServiceData ServiceData
@inject NavigationManager Navigation

<!-- Navigation Bar -->
<div class="container">
    <nav class="navbar border-bottom fixed-top">

        <!-- Logo -->
        <div class="col" align="center">
            <span class="text-bold-large text-blue" align="center" aria-label="To index" asp-area="" asp-page="/Index">Srs</span>
        </div>

        <!-- Deck column -->
        <div class="col" align="center">
            
            <!-- Deck dropdown button -->
            <div class="nav-item dropdown">
                <button class="btn text-bold-large hover-blue grayscale" type="button">
                    <img src="svg/Deck.svg" alt="" width="32" height="32" title="Decks" class="align-top">
                    <span>Decks</span>
                </button>

                <!-- Deck dropdown menu -->
                <li class="dropdown-menu dropdown-center">

                    <!-- Notification -->
                    @if (deckMsgTitle != null)
                    {
                        <div class="alert @deckMsgType text-light-small alert-dismissible fade show" role="alert" align="center">
                            <span><strong>@deckMsgTitle</strong><br>@deckMsg</span>
                            <button type="button" class="close btn-sm" @onclick="(()=>SetDeckNotification())" aria-label="Close">&times;</button>
                        </div>
                    }

                    <!-- List -->     
                    <button class="btn text-bold-small hover-blue width-full" type="button" @onclick="@(()=>Navigation.NavigateTo("/"))">List</button>

                    <div class="dropdown-divider"></div>

                    <!-- Modify -->
                    @if (ServiceData.UserId != null) { <button class="btn text-bold-small hover-blue width-full" type="button" @onclick="@(()=>Navigation.NavigateTo("/Modify"))">Create / Modify</button> }
                    else { <button class="btn text-bold-small hover-blue width-full" type="button" @onclick="@(()=>SetDeckNotification("Create / Modify Deck", "Requires to be logged in", "danger"))">Create / Modify</button> }
                </li>
            </div>
        </div>

        <!-- User column -->
        <div class="col" align="center">
            
            <!-- User dropdown button -->
            <div class="nav-item dropdown">
                <button class="btn text-bold-large hover-blue grayscale" type="button">
                    <img src="svg/User.svg" alt="" width="32" height="32" title="Decks" class="align-top">
                    <span>@userName</span>
                </button>

                <!-- User dropdown menu -->
                <li class="dropdown-menu dropdown-left">

                    <!-- Notification -->
                    @if (userMsgTitle != null)
                    {
                        <div class="alert @userMsgType text-light-small alert-dismissible fade show" role="alert" align="center">
                            <span><strong>@userMsgTitle</strong><br>@userMsg</span>
                            <button type="button" class="close btn-sm" @onclick="(()=>SetUserNotification())" aria-label="Close">&times;</button>
                        </div>
                    }
                    
                    <!-- Username input -->
                    <div class="input-group input-group-sm justify-content-center">
                        <div class="input-group-prepend">
                            <span class="input-group-text bi bi-person-fill"></span>
                        </div>
                        <input type="text" class="form-control text-light-small" placeholder="Username" autocomplete="username" @bind="loginName" @bind:event="oninput" aria-label="Username">
                    </div>

                    <!-- Password input -->                
                    <div class="input-group input-group-sm mt-2">
                        <div class="input-group-prepend">
                            <span class="input-group-text bi bi-key-fill"></span>
                        </div>
                        <input type="password" class="form-control text-light-small" placeholder="Password" autocomplete="current-password" @bind="loginPassword" @bind:event="oninput" @onkeydown="Enter" aria-label="Password">
                    </div>

                    <div class="dropdown-divider"></div>

                    <!-- Control buttons -->
                    <div class="btn-group width-full">
                        @if (ServiceData.UserId == null) {
                            <button class="btn text-bold-small hover-blue width-full" @onclick="(() => Login())">Login</button> 
                            <button class="btn text-bold-small hover-blue width-full" @onclick="(() => CreateUser())">Register</button>
                        } else {
                            <button class="btn text-bold-small hover-blue width-full" @onclick="(() => Logout())">Logout</button>
                            <button class="btn text-bold-small hover-blue width-full" @onclick="() => showSettings = !showSettings">Settings</button>
                        }
                    </div>

                    @if (showSettings) {
                    <!-- Password input -->                
                    <div class="input-group input-group-sm mt-2">
                        <div class="input-group-prepend">
                            <span class="input-group-text bi bi-key-fill"></span>
                        </div>
                        <input type="password" class="form-control text-light-small" placeholder="New Password" autocomplete="new-password" @bind="newPassword" @bind:event="oninput" aria-label="Password">
                    </div>

                    <div class="input-group input-group-sm mt-2">
                        <div class="input-group-prepend">
                            <span class="input-group-text bi bi-key-fill"></span>
                        </div>
                        <input type="password" class="form-control text-light-small" placeholder="Confirm Password" autocomplete="new-password" @bind="confirmPassword" @bind:event="oninput" aria-label="Password">
                    </div>

                    <div class="dropdown-divider"></div>

                    <button class="btn text-bold-small hover-blue width-full" type="button" @onclick="(()=>ChangePassword())">Change Password</button>
                    }
                </li>   
            </div>
        </div>
    </nav>
</div>

@code {
    private bool showSettings;
    private string loginName, loginPassword, userName, newPassword, confirmPassword;
    private string deckMsg, deckMsgType, deckMsgTitle, userMsg, userMsgType, userMsgTitle;

    private async Task Login() {
        if (loginName == null || loginPassword == null) return; // Nothing to log in to.
        Data.ReturnInfo info = await Service.LoginUserAsync(ServiceData, loginName, loginPassword);
        SetUserNotification(info.Title, info.Message, info.Type);
        if (info.Success) { userName = await Service.GetUserNameAsync(ServiceData); loginPassword = ""; }
    }

    private async Task Logout() {
        if (userName == null) return; // Nothing to log out of.
        Data.ReturnInfo info = await Service.LogoutUserAsync(ServiceData);
        SetUserNotification(info.Title, info.Message, info.Type);
        Navigation.NavigateTo("/");
        userName = "User";
    }

    private async Task CreateUser() {
        Data.ReturnInfo info = await Service.CreateUserAsync(loginName, loginPassword);
        SetUserNotification(info.Title, info.Message, info.Type);
    }

    private async Task ChangePassword() {
        Data.ReturnInfo info = await Service.ChangeUserPassword(ServiceData, loginPassword, newPassword, confirmPassword);
        if (info.Success) { loginPassword = ""; newPassword = ""; confirmPassword = ""; }
        SetUserNotification(info.Title, info.Message, info.Type);
    }

    async void Enter(KeyboardEventArgs e) {
        if (e.Code == "Enter" || e.Code == "NumpadEnter") await Login();
    }

    private void SetDeckNotification(string title = null, string msg = null, string type = "warning") {
        deckMsgTitle = title; deckMsg = msg; deckMsgType = "alert-" + type;
    }

    private void SetUserNotification(string title = null, string msg = null, string type = "warning") {
        userMsgTitle = title; userMsg = msg; userMsgType = "alert-" + type;
    }

    private async Task Initialize() {
        userName = await Service.GetUserNameAsync(ServiceData);
    }

    protected override async Task OnInitializedAsync() {
		await Initialize();
	}
}