 @inject Data.Service Service

<!-- Navigation Bar -->
<div class="container-fluid">
    <nav class="navbar border-bottom fixed-top">

        <!-- Logo -->
        <div class="col" align="center">
            <span class="navbar-text" align="center" aria-label="To index" asp-area="" asp-page="/Index">Srs</span>
        </div>

        <!-- Deck column -->
        <div class="col" align="center">

            <!-- Deck dropdown button -->
            <div class="nav-item dropdown">
                <button class="btn btn-nav-big" type="button">
                    <img src="svg/Deck.svg" alt="" width="32" height="32" title="Decks" class="align-center">
                    <span>Decks</span>
                </button>

                <!-- Deck dropdown menu -->
                <li class="dropdown-menu dropdown-menu-decks">

                    <!-- Notification -->
                    @if (deckMsgTitle != null)
                    {
                        <li class="nav-item">
                            <div class="alert @deckMsgType alert-dismissible fade show" role="alert">
                                <strong>@deckMsgTitle</strong><br>@deckMsg
                                <button type="button" class="close btn-sm" @onclick="(()=>SetDeckNotification())" aria-label="Close">&times;</button>
                            </div>
                        </li>
                    }

                    <!-- Search -->
                    <li class="nav-item">
                        <div class="input-group input-group-sm justify-content-center">
                            <div class="input-group-prepend">
                                <span class="input-group-text bi bi-search"></span>
                            </div>
                            <input type="search" class="form-control" placeholder="Search" @bind="deckSearch" @onkeydown="@EnterSearch" aria-label="Search">
                        </div>
                    </li>

                    <!-- List -->
                    <li class="nav-item mt-2">       
                        <a href="/" class="btn btn-nav-small" type="button">List</a>
                    </li>

                    <!-- Create -->
                    <li class="nav-item">
                        <div class="dropdown-divider"></div>      
                        <a href="Deck" class="btn btn-nav-small" type="button">Create</a>
                    </li>

                    <!-- Modify -->
                    <li class="nav-item mt-2">
                        <a href="/" class="btn btn-nav-small" type="button">Modify</a>
                    </li>
                </li>
            </div>
        </div>

        <!-- User column -->
        <div class="col" align="center">

            <!-- User dropdown button -->
            <div class="nav-item dropdown">
                <button class="btn btn-nav-big" type="button">
                    <img src="svg/User.svg" alt="" width="32" height="32" title="Decks" class="align-top">
                    @if (userName == null) { <span>User</span> }
                    else { <span>@userName</span> }
                </button>

                <!-- User dropdown menu -->
                <li class="dropdown-menu dropdown-menu-user">

                    <!-- Notification -->
                    @if (userMsgTitle != null)
                    {
                        <li class="nav-item">
                            <div class="alert @userMsgType alert-dismissible fade show" role="alert">
                                <strong>@userMsgTitle</strong><br>@userMsg
                                <button type="button" class="close btn-sm" @onclick="(()=>SetUserNotification())" aria-label="Close">&times;</button>
                            </div>
                        </li>
                    }

                    <!-- Username input -->
                    <li class="nav-item">
                        <div class="input-group input-group-sm justify-content-center">
                            <div class="input-group-prepend">
                                <span class="input-group-text bi bi-person-fill"></span>
                            </div>
                            <input type="text" class="form-control" placeholder="Username" @bind="loginName" aria-label="Username">
                        </div>
                    </li>

                    <!-- Password input -->
                    <li class="nav-item mt-2">                  
                        <div class="input-group input-group-sm justify-content-center">
                            <div class="input-group-prepend">
                                <span class="input-group-text bi bi-key-fill"></span>
                            </div>
                            <input type="password" class="form-control" placeholder="Username" @bind="loginPassword" @onkeydown="@EnterPassword" aria-label="Password">
                        </div>
                    </li>

                    <!-- Control buttons -->
                    <li class="nav-item">
                        <div class="dropdown-divider"></div>
                        <div class="btn-group btn-nav-group">
                            @if (userName == null) {
                                <button class="btn btn-nav-small" @onclick="(() => Login())" type="button">Login</button>
                            }
                            else {
                                <button class="btn btn-nav-small" @onclick="(() => Logout())" type="button">Logout</button>
                            }
                            <button class="btn btn-nav-small" @onclick="(() => Register())" type="button">Register</button>
                        </div>
                    </li>
                </li>    
            </div>
        </div>
    </nav>
</div>

@code {
    private string loginName, loginPassword, deckSearch, userName;
    private string deckMsg, deckMsgType, deckMsgTitle, userMsg, userMsgType, userMsgTitle;

    private async Task Login() {
        Data.Info info = await Service.LoginUserAsync(loginName, loginPassword);
        if (info.Success) {
            userName = info.Message;
            SetUserNotification("Login successful", null, "success");
        }
        else { SetUserNotification(info.Message, null, "warning"); }
    }

    private void Logout() {
        Service.ConnectionId = null;
        userName = null;
    }

    private async Task Register() {
        Data.Info info = await Service.RegisterUserAsync(loginName, loginPassword);
        if (info.Success) { SetUserNotification(info.Message, null, "success"); }
        else { SetUserNotification(info.Message, null, "error"); }
    }

    private void EnterSearch(KeyboardEventArgs e) {
        if (e.Code == "Enter" || e.Code == "NumpadEnter") {
            SetDeckNotification("Title", "this is the message, i need it to be a bit longer!!!", "success");
        }
    }

    private void EnterPassword(KeyboardEventArgs e) {
        if (e.Code == "Enter" || e.Code == "NumpadEnter") {
            SetUserNotification("Title", "User created successfully!", "success");
        }
    }

    private void SetDeckNotification(string title = null, string msg = null, string type = "warning") {
        deckMsgTitle = title;
        deckMsg = type;
        deckMsgType = "alert-" + type;
    }

    private void SetUserNotification(string title = null, string msg = null, string type = "warning") {
        userMsgTitle = title;
        userMsg = msg;
        userMsgType = "alert-" + type;
    }

    private void TryUserLogin() {
    }

    private void TryUserRegister() {
    }

}