@inject Srs.Service Service

<!-- Navigation Bar -->
<div class="container">
    <nav class="navbar border-bottom fixed-top">

        <!-- Logo -->
        <div class="col" align="center">
            <span class="navbar-text" align="center" aria-label="To index" asp-area="" asp-page="/Index">Srs</span>
        </div>

        <!-- Deck column -->
        <div class="col" align="center">
            
            <!-- Deck dropdown button -->
            <div class="nav-item dropdown">
                <button class="btn btn-nav-big" type="button">
                    <img src="svg/Deck.svg" alt="" width="32" height="32" title="Decks" class="align-top">
                    <span>Decks</span>
                </button>

                <!-- Deck dropdown menu -->
                <li class="dropdown-menu dropdown-menu-decks">

                    <!-- Notification -->
                    @if (deckMsgTitle != null)
                    {
                        <div class="alert @deckMsgType alert-dismissible fade show" role="alert">
                            <strong>@deckMsgTitle</strong><br>
                            <span class="notification-text">@deckMsg</span>
                            <button type="button" class="close btn-sm" @onclick="(()=>SetDeckNotification())" aria-label="Close">&times;</button>
                        </div>
                    }

                    <!-- List -->     
                    <a href="/" class="btn btn-nav-small" type="button">List</a>

                    <!-- Create -->
                    <div class="dropdown-divider"></div>
                    @if (Service.ConnectionId != null) { <a href="Create" class="btn btn-nav-small" type="button">Create</a> }
                    else { <button class="btn btn-nav-small" type="button" @onclick="@(()=>SetDeckNotification("Create Deck", "Requires to be logged in", "danger"))">Create</button> }
                        
                    <!-- Modify -->
                    <!-- <a href="/" class="btn btn-nav-small" type="button">Modify</a> -->
                </li>
            </div>
        </div>

        <!-- User column -->
        <div class="col" align="center">
            
            <!-- User dropdown button -->
            <div class="nav-item dropdown">
                <button class="btn btn-nav-big" type="button">
                    <img src="svg/User.svg" alt="" width="32" height="32" title="Decks" class="align-top">
                    @if (userName == null) { <span>User</span> }
                    else { <span>@userName</span> }
                </button>

                <!-- User dropdown menu -->
                <li class="dropdown-menu dropdown-menu-user">

                    <!-- Notification -->
                    @if (userMsgTitle != null)
                    {
                            <div class="alert @userMsgType alert-dismissible fade show" role="alert">
                                <strong>@userMsgTitle</strong><br>@userMsg
                                <button type="button" class="close btn-sm" @onclick="(()=>SetUserNotification())" aria-label="Close">&times;</button>
                            </div>
                    }

                    <!-- Username input -->
                        <div class="input-group input-group-sm justify-content-center">
                            <div class="input-group-prepend">
                                <span class="input-group-text bi bi-person-fill"></span>
                            </div>
                            <input type="text" class="form-control" placeholder="Username" @bind="loginName" @bind:event="oninput" aria-label="Username">
                        </div>

                    <!-- Password input -->                
                        <div class="input-group input-group-sm justify-content-center mt-2">
                            <div class="input-group-prepend">
                                <span class="input-group-text bi bi-key-fill"></span>
                            </div>
                            <input type="password" class="form-control" placeholder="Username" @bind="loginPassword" @bind:event="oninput" @onkeydown="Enter" aria-label="Password">
                        </div>

                    <!-- Control buttons -->
                        <div class="dropdown-divider"></div>
                        <div class="btn-group btn-nav-group">
                            @if (userName == null) { <button class="btn btn-nav-small" @onclick="(() => Login())" type="button">Login</button> }
                            else { <button class="btn btn-nav-small" @onclick="(() => Logout())" type="button">Logout</button> }
                            <button class="btn btn-nav-small" @onclick="(() => CreateUser())" type="button">Register</button>
                        </div>
                </li>   
            </div>
        </div>
    </nav>
</div>

@code {
    private string loginName, loginPassword, deckSearch, userName;
    private string deckMsg, deckMsgType, deckMsgTitle, userMsg, userMsgType, userMsgTitle;

    private async Task Login() {
        Data.ReturnInfo info = await Service.LoginUserAsync(loginName, loginPassword);
        if (info.Success) { userName = info.Message; SetUserNotification("Login successful", null, "success"); }
        else SetUserNotification(info.Message, null, "warning");
    }

    private void Logout() {
        Service.ConnectionId = null;
        userName = null;
    }

    private async Task CreateUser() {
        // Error
        if (loginName == null || loginPassword == null) return;
        
        Data.ReturnInfo info = await Service.CreateUserAsync(loginName, loginPassword);
        if (info.Success) { SetUserNotification(info.Message, null, "success"); }
        else { SetUserNotification(info.Message, null, "danger"); }
    }

    private void Enter(KeyboardEventArgs e) {
        if (e.Code == "Enter" || e.Code == "NumpadEnter") Login();
    }

    private void SetDeckNotification(string title = null, string msg = null, string type = "warning") {
        deckMsgTitle = title; deckMsg = msg; deckMsgType = "alert-" + type;
    }

    private void SetUserNotification(string title = null, string msg = null, string type = "warning") {
        userMsgTitle = title; userMsg = msg; userMsgType = "alert-" + type;
    }
}