@page "/Deck"

@using Srs.Data
@using System.Linq;
@inject Srs.Service Service
@inject Srs.ServiceData ServiceData
@inject NavigationManager Navigation

<div class="container">
	<div class="row justify-content-center">

		<!-- Review -->
		<div class="col mr-3" align="center">
			<span class="text-bold-large">Review</span>

			<!-- Front -->
			<div class="row">
				<textarea class="form-control text-light-small text-center mt-2" maxlength="0" rows="3" @bind="cardFront" readonly></textarea>
			</div>

			<!-- Back -->
			<div class="row">
				<textarea class="form-control text-light-small @placeholderColor text-center mt-2" maxlength="50" rows="3" placeholder="@cardPlaceholder" @bind="cardBack" @bind:event="oninput" @onkeyup="Enter" autofocus></textarea>				
			</div>

			@if (reviewRunning) {
				<!-- Enter -->
				<div class="row justify-content-center">
					<button class="btn text-bold-medium hover-green" type="button" @onclick="(() => ReviewCardValidate())">
                    	<span>Enter</span>
                	</button>
				</div>
			}
		</div>

		<!-- Options -->
		<div class="col ml-3" align="center">
			<span class="text-bold-large">Options</span>

				<!-- Review slider -->
				<div class="row mt-2">
					<div class="input-group input-group-sm justify-content-center">
						<span class="text-light-medium">Number of cards to review : @reviewAmount</span>
						@if (!reviewRunning) { <input type="range" class="form-range" min="10" max="50" step="5" @bind="reviewAmount"> }
						else { <input type="range" class="form-range" min="10" max="50" step="5" @bind="reviewAmount" disabled> }
					</div>
				</div>

				<!-- Card slider -->
				<div class="row mt-2">
					<div class="input-group input-group-sm justify-content-center">
						<span class="text-light-medium">Percentage of new cards : @reviewPercent %</span>
						@if (!reviewRunning) { <input type="range" class="form-range" min="0" max="100" step="10" @bind="reviewPercent"> }
						else { <input type="range" class="form-range" min="0" max="100" step="10" @bind="reviewPercent" disabled> }
					</div>
				</div>

				<!-- Typos -->
				<div class="row mt-2" align="center">
					<div class="container">
 						@if (!reviewRunning) { <input class="form-check-input" type="checkbox" id="allowTypos" @bind="reviewTypos"> }
						else { <input class="form-check-input" type="checkbox" id="allowTypos" @bind="reviewTypos" disabled> }
						<span class="text-light-medium" for="allowTypos">Allow small typos</span>
					</div>
				</div>

			
			<!-- Start -->
			<div class="divider mt-2"></div>
			<div class="row justify-content-center mt-2">
				<button class="btn text-bold-large hover-blue" type="button" @onclick="(() => ReviewDeckCreate())">
                    <img src="svg/Play.svg" alt="" width="27" height="27" class="align-top">
                    <span>Start Review</span>
                </button>
			</div>
		</div>
	</div>
</div>

@code
{
	private int currentIndex;
	private int[] indexArray;
	private float reviewAmount, reviewPercent;
	private bool reviewTypos = true, reviewRunning;
	private string cardFront, cardBack, cardPlaceholder, placeholderColor;
	private Data.PartialDeck partialDeck;
	private Dictionary<int, int> reviewReturn;

	private async void ReviewDeckCreate() {
		currentIndex = 0;
		reviewRunning = true;
		reviewReturn = new Dictionary<int, int>();
		partialDeck = await Service.CreateReviewDeckAsync(ServiceData, reviewAmount, reviewPercent);
		indexArray = partialDeck.Cards.Keys.ToArray();
		ReviewCardDisplay();
	}

	private void ReviewCardDisplay() {
		if (currentIndex >= indexArray.Count()) { ReturnReviewDeck(); return; }
		cardFront = partialDeck.Cards[indexArray[currentIndex]].Front;
		cardBack = null;
	}

	private void ReviewCardValidate() {
		if (!reviewRunning) return;
		string tempBack = new string(cardBack.Where(x => char.IsLetterOrDigit(x)).ToArray());
		string tempAnswer = new string(partialDeck.Cards[indexArray[currentIndex]].Back.Where(x => char.IsLetterOrDigit(x)).ToArray());
		if (reviewTypos) { tempBack = tempBack.ToLower(); tempAnswer = tempAnswer.ToLower(); }
		if (tempBack == tempAnswer) { placeholderColor = "placeholder-green"; cardPlaceholder = "Correct!"; reviewReturn.Add(partialDeck.Cards[indexArray[currentIndex]].Id, 1); }
		else { placeholderColor = "placeholder-red"; cardPlaceholder = "Incorrect! Answer was: " + partialDeck.Cards[indexArray[currentIndex]].Back; reviewReturn.Add(partialDeck.Cards[indexArray[currentIndex]].Id, -1); }
		currentIndex += 1;
		ReviewCardDisplay();
	}

	private async void ReturnReviewDeck() {
		Data.ReturnInfo info = await Service.ReviewDeckReturnAsync(ServiceData, reviewReturn);
		cardFront = info.Message;
		cardBack = "";
		reviewRunning = false;
	}

	private void Enter(KeyboardEventArgs e) {
        if ((e.Code == "Enter" || e.Code == "NumpadEnter") && e.ShiftKey == false) ReviewCardValidate();
    }

	private Task Initialize() {
		if (ServiceData.Deck.Id == 0) Navigation.NavigateTo("/");
		partialDeck = new Data.PartialDeck();
		partialDeck.Cards = new SortedDictionary<int, Card>();
		reviewReturn = new Dictionary<int, int>();
		reviewPercent = 50;
		reviewAmount = 10;
		return Task.CompletedTask;
	}

	protected override async Task OnInitializedAsync() {
		await Initialize();
	}
}