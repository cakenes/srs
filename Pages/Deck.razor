@page "/Deck"

@using Srs.Data
@inject Data.Service Service

<!-- Container -->
<div class="container">
	<div class="row justify-content-center">

		<!-- Deck -->
		<div class="col" align="center">
			<span class="text-header">Deck</span>

			<!-- Name -->
			<div class="input-group input-group-sm mt-2">
	 			<div class="input-group-prepend">
    				<span class="input-group-text bi bi-stack"></span>
    			</div>
				<input type="text" class="form-control rounded-right" placeholder="Name" @bind="tempDeck.Name" aria-label="Deck name">
			</div>

			<!-- User -->
			<div class="input-group input-group-sm mt-2">
				<div class="input-group-prepend">
			    	<span class="input-group-text bi bi-people-fill rounded-left"></span>
			    </div>
				<input type="text" class="form-control rounded-right" placeholder="Users" disabled>

				<!-- User tooltip -->
				<div class="dropdown">
	  				<button class="btn btn-sm btn-tooltip">
						<span class="dropdown bi bi-question-circle"></span>
					</button>
  					<div class="dropdown-menu dropdown-menu-tooltip-left">
						<span class="dropdown-item text-tooltip disabled">!! Currently disabled !!</span>
						<span class="dropdown-item text-tooltip disabled">Seperate multiple users with comma.</span>
						<span class="dropdown-item text-tooltip disabled">(e.g. user1,user2)</span>
					</div>
				</div>
			</div>

			<!-- Password -->
			<div class="input-group input-group-sm mt-2">
	 			<div class="input-group-prepend">
    				<span class="input-group-text bi bi-lock-fill"></span>
    			</div>
				<input type="text" class="form-control rounded-right" placeholder="Password" @bind="tempDeck.Password" disabled>

				<!-- Password tooltip -->
				<div class="dropdown">
	  				<button class="btn btn-sm btn-tooltip">
						<span class="dropdown bi bi-question-circle"></span>
					</button>
  					<div class="dropdown-menu dropdown-menu-tooltip-left">
						<span class="dropdown-item text-tooltip disabled">!! Currently disabled !!</span>
						<span class="dropdown-item text-tooltip disabled">Password required to open deck.</span>
					</div>
				</div>

			</div>

			<div class="row justify-content-center">
				<button class="btn btn-accept" type="button">Save</button>
			</div>
			
		</div>

		<!-- Card -->
		<div class="col" align="center">
			<span class="text-header">Card</span>

			<!-- Card front -->
			<div class="input-group input-group-sm mt-2">
				<textarea class="form-control text-center rounded-right" maxlength="50" rows="5" placeholder="Front of the card" @bind="tempCard.Front"></textarea>

				<!-- Front tooltip -->
				<div class="dropdown">
  					<button class="btn btn-sm btn-tooltip">
						<span class="dropdown bi bi-question-circle"></span>
					</button>
  					<div class="dropdown-menu dropdown-menu-tooltip-left">
						<span class="dropdown-item text-tooltip disabled">Limited currently to 5rows, 50chars</span>
					</div>
				</div>
			</div>

			<!-- Card back -->
			<div class="input-group  input-group-sm mt-2">
				<textarea class="form-control text-center rounded-right" maxlength="50" rows="5" placeholder="Front of the card" @bind="tempCard.Back"></textarea>

				<!-- Back tooltip -->
				<div class="dropdown">
  					<button class="btn btn-sm btn-tooltip">
						<span class="dropdown bi bi-question-circle"></span>
					</button>
  					<div class="dropdown-menu dropdown-menu-tooltip-left">
						<span class="dropdown-item text-tooltip disabled">Limited currently to 5rows, 50chars</span>
					</div>
				</div>
			</div>

			<!-- Card action -->
			<div class="row justify-content-center">
				<button class="btn btn-accept" type="button" @onclick="(() => SaveCard())">Save</button>
			</div>
		</div>
	</div>

	<!-- Card list header -->
	<div class="row justify-content-center mt-2">
		<span class="text-header">Card list</span>
	</div>

	<!-- Table -->
	<div class="row justify-content-center mt-2">
		<table class="table table-new table-sm">
			<colgroup>
				<col span="1" style="width: 45%;">
       			<col span="1" style="width: 45%;">
				<col span="1" style="width: 10%;"> 
			</colgroup>

			<!-- Sort -->
			<thead>
				<tr>

				<!-- Sort by front -->
      				<th scope="col">
						<div class="btn-group" role="group" aria-label="Sort by popularity">
							@if (listSort == 0 || listSort == 1) {
								<button class="btn btn-sort btn-active text-left" @onclick="(() => ToggleSort(0,1))" type="button">Front
									@if (listSort == 0) { <span class="bi bi-sort-alpha-down"></span> }
									else if (listSort == 1) { <span class="bi bi-sort-alpha-up"></span> }
								</button>
							}
							else {
								<button class="btn btn-sort text-left" @onclick="(() => ToggleSort(0,1))" type="button">Front
									<span class="bi bi-sort-alpha-up btn-inactive"></span>
								</button>
							}
						</div>
					</th>

					<!-- Sort by back -->
      				<th scope="col">
						<div class="btn-group" role="group" aria-label="Sort by name">
							@if (listSort == 2 || listSort == 3) {
								<button class="btn btn-sort btn-active text-left" @onclick="(() => ToggleSort(2,3))" type="button">Back
									@if (listSort == 2) { <span class="bi bi-sort-alpha-down"></span> }
									else if (listSort == 3) { <span class="bi bi-sort-alpha-up"></span> }
								</button>
							}
							else {
								<button class="btn btn-sort text-left" @onclick="(() => ToggleSort(2,3))" type="button">Back
									<span class="bi bi-sort-alpha-up btn-inactive"></span>
								</button>
							}
						</div>
					</th>

					<!-- Action -->
					<th scope="col" class="text-center">
						<span class="btn btn-sort">Action</span>
					</th>
				</tr>
			</thead>

			<!-- List -->
			<tbody>
				@if (tempDeck.Cards == null) { tempDeck.Cards = new List<Card>(); }
				@foreach (Card item in sortedList)
				{
				<tr>
		    		<td class="text-left">
						<span>@item.Front</span>		
					</td>
      				<td class="text-left overflow-hidden">
						<span>@item.Back</span>
					</td>
     				<td class="text-right">
                        <button class="btn btn-sm btn-select" type="button" @onclick="(() => EditCard(item.Id))">
							<img src="svg/Edit.svg" alt="" width="16" height="16" title="Edit">
						</button>
						<button class="btn btn-sm btn-select" type="button">
							<img src="svg/Delete.svg" alt="" width="16" height="16" title="Delete">
						</button>
					</td>
    			</tr>
				}
  			</tbody>
		</table>
	</div>
</div>

@code
{
	private Data.Deck tempDeck = new Data.Deck();
	private Data.Card tempCard = new Data.Card { Id = -1 };
	private List<Card> sortedList = new List<Card>();
	private int listSort = -1;

	

	private void ToggleSort(int indexOne, int indexTwo, bool refresh = false) {

		if (listSort == -1 && !refresh) listSort = indexOne;
		else if (listSort == indexOne && !refresh) listSort = indexTwo;
		else if (listSort == indexTwo && !refresh) listSort = -1;
		else if (!refresh) listSort = indexOne;

		switch (listSort) {
			case 0: sortedList = tempDeck.Cards.OrderBy(x => x.Front).ToList(); break;
			case 1: sortedList = tempDeck.Cards.OrderByDescending(x => x.Front).ToList(); break;
			case 2: sortedList = tempDeck.Cards.OrderBy(x => x.Front).ToList(); break;
			case 3: sortedList = tempDeck.Cards.OrderByDescending(x => x.Front).ToList(); break;
			default: sortedList = tempDeck.Cards; break;
		}
	}

	private void SaveCard() {
		// Add new card
		if (tempCard.Id == -1) { tempCard.Id = tempDeck.Cards.Count(); tempDeck.Cards.Add(tempCard); }
		// Edit old card
		else { tempDeck.Cards[tempCard.Id] = tempCard; }
		// Refresh displayed list
		ToggleSort(0, 0, true);
		// Reset card
		tempCard = new Data.Card { Id = -1 };
	}

	private void EditCard(int index) {
		tempCard = tempDeck.Cards[index];
	}

	private void DeleteCard(int index) {
		tempDeck.Cards.RemoveAt(index);
	}

	// Accept enter on search
    private void SearchDeck(KeyboardEventArgs e = null) {
        if (e.Code == "Enter" || e.Code == "NumpadEnter") {  
        }
    }

}