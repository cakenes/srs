@page "/Deck"

@using Srs.Data
@using System.Linq;
@inject Srs.Service Service
@inject Srs.ServiceData ServiceData
@inject NavigationManager Navigation

<div class="container">
	<div class="row justify-content-center">

		<!-- Review -->
		<div class="col mr-3" align="center">
			@if (reviewRunning) { <span class="text-bold-large">Review: @(currentIndex+1) of @indexArray.Count()</span> }
			else { <span class="text-bold-large">Review</span> }

			<!-- Front -->
			<div class="row">
				<textarea class="form-control text-light-small text-center mt-2" maxlength="0" rows="3" @bind="cardFront" readonly></textarea>
			</div>

			<!-- Back -->
			<div class="row">
				<textarea class="form-control text-light-small text-center mt-2" maxlength="50" rows="3" placeholder="Answer" @bind="cardBack" @bind:event="oninput" @onkeyup="Enter" autofocus></textarea>				
			</div>

			<!-- Enter -->
			<div class="row justify-content-center">
				@if (reviewRunning) { <button class="btn text-bold-medium hover-green" type="button" @onclick="(() => ValidateReview())">Check</button> }
				else { <button class="btn text-bold-medium hover-green" type="button" @onclick="(() => ValidateReview())" disabled>Check</button> }
			</div>

			@if (cardMsgTitle != null) {
				<div class="row justify-content-center">
					<div class="alert @cardMsgType text-light-small width-full alert-dismissible fade show" role="alert" align="center">
			            <strong>@cardMsgTitle</strong><br>@cardMsg
	                    <button type="button" class="close btn-sm" @onclick="(()=>SetCardNotification())" aria-label="Close">&times;</button>
            		</div>
				</div>
			}

			@if (deckMsgTitle != null) {
				<div class="row justify-content-center">
					<div class="alert @deckMsgType text-light-small width-full alert-dismissible fade show" role="alert" align="center">
		                <strong>@deckMsgTitle</strong><br>@deckMsg
                    	<button type="button" class="close btn-sm" @onclick="(()=>SetDeckNotification())" aria-label="Close">&times;</button>
                	</div>
				</div>
			}


		</div>

		<!-- Options -->
		<div class="col ml-3" align="center">
			<span class="text-bold-large">Options</span>

				<!-- Review slider -->
				<div class="row mt-2">
					<div class="input-group input-group-sm justify-content-center">
						<span class="text-light-medium">Number of cards to review : @reviewAmount</span>
						@if (!reviewRunning) { <input type="range" class="form-range" min="10" max="50" step="5" @bind="reviewAmount"> }
						else { <input type="range" class="form-range" min="10" max="50" step="5" @bind="reviewAmount" disabled> }
					</div>
				</div>

				<!-- Card slider -->
				<div class="row mt-2">
					<div class="input-group input-group-sm justify-content-center">
						<span class="text-light-medium">Percentage of new cards : @reviewPercent %</span>
						@if (!reviewRunning) { <input type="range" class="form-range" min="0" max="100" step="10" @bind="reviewPercent"> }
						else { <input type="range" class="form-range" min="0" max="100" step="10" @bind="reviewPercent" disabled> }
					</div>
				</div>

				<!-- Typos -->
				<div class="row mt-2" align="center">
					<div class="container">
 						@if (!reviewRunning) { <input class="form-check-input" type="checkbox" id="allowTypos" @bind="reviewTypos"> }
						else { <input class="form-check-input" type="checkbox" id="allowTypos" @bind="reviewTypos" disabled> }
						<span class="text-light-medium" for="allowTypos">Allow small typos</span>
					</div>
				</div>

			
			<!-- Start -->
			<div class="divider mt-2"></div>
			<div class="row justify-content-center mt-2">
				<button class="btn text-bold-large hover-blue" type="button" @onclick="(() => ReviewDeckCreate())">
                    <img src="svg/Play.svg" alt="" width="27" height="27" class="align-top">
                    <span>Start Review</span>
                </button>
			</div>
		</div>
	</div>
</div>

@code
{
	private int currentIndex = 0;
	private int[] indexArray;
	private float reviewAmount = 10, reviewPercent = 70;
	private bool reviewTypos = true, reviewRunning;
	private string cardFront, cardBack;
	private string cardMsgTitle, cardMsg, cardMsgType;
	private string deckMsgTitle, deckMsg, deckMsgType;
	private Dictionary<int, int> reviewReturn;

	private async Task ReviewDeckCreate() {
		Data.ReturnInfo returnInfo = await Service.CreateReviewDeckAsync(ServiceData, reviewAmount, reviewPercent);
		if (!returnInfo.Success) SetDeckNotification(returnInfo.Title, returnInfo.Message, returnInfo.Type);
		reviewRunning = true;
		currentIndex = 0;
		reviewReturn = new Dictionary<int, int>();
		indexArray =  ServiceData.Review.Cards.Keys.ToArray();
		ReviewCardDisplay();
		await Task.CompletedTask;
	}

	private void ReviewCardDisplay() {
		cardFront = ServiceData.Review.Cards[indexArray[currentIndex]].Front;
		cardBack = "";
	}

	private void ValidateReview() {
		if (!reviewRunning) return;
		string[] tempAnswers = ServiceData.Review.Cards[indexArray[currentIndex]].Back.Split('|');
		string tempBack = new string(cardBack.Where(x => char.IsLetterOrDigit(x)).ToArray());

		foreach (string answer in tempAnswers)
		{
			string tempAnswer = new string(answer.Where(x => char.IsLetterOrDigit(x)).ToArray());
			if (tempAnswer == tempBack) {

				if (tempAnswers.Count() > 1) SetCardNotification("Correct!", "Would of accepted any of: " + ServiceData.Review.Cards[indexArray[currentIndex]].Back.Replace("|", ", "), "success");
				else SetCardNotification("Correct!", "Good job, keep it going", "success");
				reviewReturn.Add(ServiceData.Review.Cards[indexArray[currentIndex]].Id, 1);
				currentIndex += 1; ReviewCardDisplay(); return;
			}
		}
		
		if (tempAnswers.Count() > 1) SetCardNotification("Incorrect!", "Acceptable answers were: " + ServiceData.Review.Cards[indexArray[currentIndex]].Back.Replace("|", ", "), "danger");
		else SetCardNotification("Incorrect!", "Correct answer was: " + ServiceData.Review.Cards[indexArray[currentIndex]].Back, "danger");
		reviewReturn.Add(ServiceData.Review.Cards[indexArray[currentIndex]].Id, -1);

		currentIndex += 1;

		if (currentIndex < indexArray.Length) {  ReviewCardDisplay(); }
	}

	private async void ReturnReviewDeck() {
		Data.ReturnInfo info = await Service.ReviewDeckReturnAsync(ServiceData, reviewReturn);
		SetDeckNotification(info.Title, info.Message, info.Type);
		reviewRunning = false;
		cardBack = "";
	}

	private void SetDeckNotification(string title = null, string msg = null, string type = "warning") {
        deckMsgTitle = title;
        deckMsg = msg;
        deckMsgType = "alert-" + type;
    }

	private void SetCardNotification(string title = null, string msg = null, string type = "warning") {
        cardMsgTitle = title;
        cardMsg = msg;
        cardMsgType = "alert-" + type;
	}

	private void Enter(KeyboardEventArgs e) {
        if ((e.Code == "Enter" || e.Code == "NumpadEnter") && e.ShiftKey == false) ValidateReview();
    }

	private Task Initialize() {
		if (ServiceData.Review.Name == null) Navigation.NavigateTo("/");
		if (ServiceData.UserId == null) SetDeckNotification("Progress", "Progress wont be saved without logging in", "warning");
		reviewReturn = new Dictionary<int, int>();
		return Task.CompletedTask;
	}

	protected override async Task OnInitializedAsync() {
		await Initialize();
	}
}