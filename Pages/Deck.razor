@page "/Deck"

@using Srs.Data
@using System.Linq;
@inject Srs.Service Service;
@inject NavigationManager Navigation

<div class="container">
	<div class="row justify-content-center">

		@if (Service.Deck.Id == 0) Navigation.NavigateTo("/");
		@if (reviewReturn == null) Initialize();

		<!-- Review -->
		<div class="col mr-3" align="center">
			<span class="text-header">Review</span>

			<!-- Front -->
			<div class="row">
				<textarea class="form-control text-center mt-2" maxlength="0" rows="3" @bind="cardFront" readonly></textarea>
			</div>

			<!-- Back -->
			<div class="row">
				@if (placeholderColor) {
					<textarea class="form-control form-control-green text-center mt-2" maxlength="50" rows="3" placeholder="@cardPlaceholder" @bind="cardBack" @bind:event="oninput" @onkeyup="Enter"></textarea>
				}
				else {
					<textarea class="form-control form-control-red text-center mt-2" maxlength="50" rows="3" placeholder="@cardPlaceholder" @bind="cardBack" @bind:event="oninput" @onkeyup="Enter"></textarea>
				}
				
			</div>

			@if (reviewRunning) {
				<!-- Enter -->
				<div class="row justify-content-center">
					<button class="btn btn-nav-big" type="button" @onclick="(() => ReviewCardValidate())">
                    	<span>Enter</span>
                	</button>
				</div>
			}
		</div>

		<!-- Options -->
		<div class="col ml-3" align="center">
			<span class="text-header">Options</span>

			<!-- Locked -->
			@if (!reviewRunning) {
				<!-- Review slider -->
				<div class="row mt-2">
					<div class="input-group input-group-sm justify-content-center">
						<span class="text-subheader">Number of cards to review : @reviewAmount</span>
						<input type="range" class="form-range" min="10" max="50" step="5" @bind="reviewAmount">
					</div>
				</div>

				<!-- Card slider -->
				<div class="row mt-2">
					<div class="input-group input-group-sm justify-content-center">
						<span class="text-subheader">Percentage of new cards : @reviewPercent %</span>
						<input type="range" class="form-range" min="0" max="100" step="10" @bind="reviewPercent">
					</div>
				</div>

				<!-- Typos -->
				<div class="row mt-2" align="center">
					<div class="container">
 						<input class="form-check-input" type="checkbox" id="allowTypos" @bind="reviewTypos">
						<span class="text-subheader" for="allowTypos">Allow small typos</span>
					</div>
				</div>
			}
			else {
				<!-- Review slider -->
				<div class="row mt-2">
					<div class="input-group input-group-sm justify-content-center">
						<span class="text-subheader">Number of cards to review : @reviewAmount</span>
						<input type="range" class="form-range" min="10" max="50" step="5" @bind="reviewAmount" disabled>
					</div>
				</div>

				<!-- Card slider -->
				<div class="row mt-2">
					<div class="input-group input-group-sm justify-content-center">
						<span class="text-subheader">Percentage of new cards : @reviewPercent %</span>
						<input type="range" class="form-range" min="0" max="100" step="10" @bind="reviewPercent" disabled>
					</div>
				</div>

				<!-- Typos -->
				<div class="row mt-2" align="center">
					<div class="container">
 						<input class="form-check-input" type="checkbox" id="allowTypos" @bind="reviewTypos" disabled>
						<span class="text-subheader" for="allowTypos">Allow small typos</span>
					</div>
				</div>
			}
			
			<div class="divider mt-2"></div>

			<!-- Start -->
			<div class="row justify-content-center mt-2">
				<button class="btn btn-nav-big" type="button" @onclick="(() => ReviewDeckCreate())">
                    <img src="svg/Play.svg" alt="" width="20" height="20" title="Decks" class="svg-start">
                    <span>Start</span>
                </button>
			</div>
		</div>
	</div>
</div>

@code
{
	// Ui
	private string cardFront, cardBack, cardPlaceholder;
	// Review
	private int currentIndex;
	private int[] indexArray;
	private float reviewAmount, reviewPercent;
	private bool reviewTypos, reviewRunning, placeholderColor;
	private Data.PartialDeck partialDeck;
	private Dictionary<int, int> reviewReturn;

	private void Initialize() {
		partialDeck = new Data.PartialDeck();
		partialDeck.Cards = new SortedDictionary<int, Card>();
		reviewReturn = new Dictionary<int, int>();
		reviewPercent = 50;
		reviewAmount = 10;
	}

	private async void ReviewDeckCreate() {
		currentIndex = 0;
		reviewRunning = true;
		reviewReturn = new Dictionary<int, int>();
		partialDeck = await Service.ReviewDeckCreateAsync(reviewAmount, reviewPercent);
		indexArray = partialDeck.Cards.Keys.ToArray();
		ReviewCardDisplay();
	}

	private void ReviewCardDisplay() {
		if (currentIndex >= indexArray.Count()) { ReturnReviewDeck(); return; }
		cardFront = partialDeck.Cards[indexArray[currentIndex]].Front;
		cardBack = null;
	}

	private void ReviewCardValidate() {
		string tempBack = new string(cardBack.Where(x => char.IsLetterOrDigit(x)).ToArray());
		string tempAnswer = new string(partialDeck.Cards[indexArray[currentIndex]].Back.Where(x => char.IsLetterOrDigit(x)).ToArray());
		if (tempBack == tempAnswer) { placeholderColor = true; cardPlaceholder = "Correct!"; reviewReturn.Add(partialDeck.Cards[indexArray[currentIndex]].Id, 1); }
		else { placeholderColor = false; cardPlaceholder = "Incorrect! Answer was: " + tempAnswer; reviewReturn.Add(partialDeck.Cards[indexArray[currentIndex]].Id, -1); }
		currentIndex += 1;
		ReviewCardDisplay();
	}

	private async void ReturnReviewDeck() {
		Data.ReturnInfo info = await Service.ReviewDeckReturnAsync(reviewReturn);
		reviewRunning = false;
		cardFront = "Review done!";
	}

	private void Enter(KeyboardEventArgs e) {
        if ((e.Code == "Enter" || e.Code == "NumpadEnter") && e.ShiftKey == false) ReviewCardValidate();
    }
}