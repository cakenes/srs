@page "/"

@using Srs.Data
@inject Data.Service Service

<!-- Container -->
<div class="container">

	<!-- Search -->
	<div class="row">
		<div class="input-group justify-content-center">
			<input type="search" class="form-control rounded-left" placeholder="What are you looking for?" @bind="deckSearch" @onkeydown="@SearchDeck" aria-label="Search">
			<div class="input-group-append">
				<button class="btn btn-search" type="button" @onclick="(() => SearchDeck())">Search</button>
  			</div>
		</div>
	</div>

	<!-- List from server -->
	@if (deckList == null) LoadDeckInfo();

	<!-- Table -->
	<div class="row justify-content-center mt-2">
		<table class="table table-new table-sm">
			<colgroup>
				<col span="1" style="width: 5%;">
       			<col span="1" style="width: 85%;">
				<col span="1" style="width: 5%;"> 
       			<col span="1" style="width: 5%;">
			</colgroup>

			<!-- Sort -->
  			<thead>
	    		<tr>

					<!-- Sort by popularity -->
      				<th scope="col">
						<div class="btn-group" role="group" aria-label="Sort by popularity">
							@if (listSort == 1 || listSort == 2) {
								<button class="btn btn-sort btn-active text-left" @onclick="(() => ToggleSort(1))" type="button">Popularity
									@if (listSort == 1) { <span class="bi bi-sort-down"></span> }
									else if (listSort == 2) { <span class="bi bi-sort-up"></span> }
								</button>
							}
							else {
								<button class="btn btn-sort text-left" @onclick="(() => ToggleSort(1))" type="button">Popularity
									<span class="bi bi-sort-up btn-inactive"></span>
								</button>
							}
						</div>
					</th>

					<!-- Sort by name -->
      				<th scope="col">
						<div class="btn-group" role="group" aria-label="Sort by name">
							@if (listSort == 3 || listSort == 4) {
								<button class="btn btn-sort btn-active text-left" @onclick="(() => ToggleSort(3))" type="button">Name
									@if (listSort == 3) { <span class="bi bi-sort-alpha-down"></span> }
									else if (listSort == 4) { <span class="bi bi-sort-alpha-up"></span> }
								</button>
							}
							else {
								<button class="btn btn-sort text-left" @onclick="(() => ToggleSort(3))" type="button">Name
									<span class="bi bi-sort-alpha-up btn-inactive"></span>
								</button>
							}
						</div>
					</th>

					<!-- Sort by author -->
      				<th scope="col justify-content-center">
						<div class="btn-group" role="group" aria-label="Sort by author">
							@if (listSort == 5 || listSort ==6) {
								<button class="btn btn-sort btn-active text-left" @onclick="(() => ToggleSort(5))" type="button">Author
									@if (listSort == 5) { <span class="bi bi-sort-alpha-down"></span> }
									else if (listSort == 6) { <span class="bi bi-sort-alpha-up"></span> }
								</button>
							}
							else {
								<button class="btn btn-sort text-left" @onclick="(() => ToggleSort(5))" type="button">Author
									<span class="bi bi-sort-alpha-up btn-inactive"></span>
								</button>
							}
						</div>		  
					</th>

					<!-- Sort by cards -->
      				<th scope="col">
						<div class="btn-group" role="group" aria-label="Sort by cards">
							@if (listSort == 7 || listSort == 8) {
								<button class="btn btn-sort btn-active text-right" @onclick="(() => ToggleSort(7))" type="button">
									@if (listSort == 7) { <span class="bi bi-sort-numeric-down"></span> }
									else if (listSort == 8) { <span class="bi bi-sort-numeric-up"></span> }
								Cards</button>
							}
							else {
								<button class="btn btn-sort text-right" @onclick="(() => ToggleSort(7))" type="button">
									<span class="bi bi-sort-numeric-up btn-inactive"></span>
								Cards</button>
							}
						</div>	
					</th>
    			</tr>
  			</thead>

			<!-- List -->
			<tbody>
				@foreach (DeckInfo item in deckList)
				{
					<tr>
		    		<td>
						<span>@item.Popularity</span>
						<button class="btn btn-favorite" type="button">
							<img src="svg/Star.svg" alt="" width="16" height="16" title="Decks" class="align-center">
						</button>
	  				</td>
    				<td>
						<button class="btn btn-select" type="button">
							<img src="svg/Select.svg" alt="" width="16" height="16" title="Decks">
							@if (item.Password) { <img src="svg/Lock.svg" alt="" width="16" height="16" title="Decks"> }
							<span>@item.Name</span>
						</button>
					</td>
      				<td class="text-center">
						<span>@item.Author</span>
					</td>
     				<td class="text-right">
						<span>@item.Cards</span>
					</td>
    			</tr>
				}
  			</tbody>
		</table>
	</div>
</div>

@code
{
	private string deckSearch;
	private List<DeckInfo> deckList;
	private List<DeckInfo> sortedDeck;

	private int listSort;

	private void ToggleSort(int input) {
		if (listSort == 0) listSort = input;
		else if (listSort == input) listSort += 1;
		else if (listSort == input + 1) listSort = 0;
		else if (input != -1) listSort = input;

		switch (listSort) {
			case 0: sortedDeck = deckList; break;
			case 1: sortedDeck = deckList.OrderBy(x => x.Popularity).ToList(); break;
			case 2: sortedDeck = deckList.OrderByDescending(x => x.Popularity).ToList(); break;
			case 3: sortedDeck = deckList.OrderBy(x => x.Name).ToList(); break;
			case 4: sortedDeck = deckList.OrderByDescending(x => x.Name).ToList(); break;
			case 5: sortedDeck = deckList.OrderBy(x => x.Author).ToList(); break;
			case 6: sortedDeck = deckList.OrderByDescending(x => x.Author).ToList(); break;
			case 7: sortedDeck = deckList.OrderBy(x => x.Cards).ToList(); break;
			case 8: sortedDeck = deckList.OrderByDescending(x => x.Cards).ToList(); break;
			default: sortedDeck = deckList; break;
		}
	}

	public async void LoadDeckInfo() {
		deckList = await Service.LoadDeckInfoAsync();
	}

	// Accept enter on search
    private void SearchDeck(KeyboardEventArgs e = null) {
        if (e.Code == "Enter" || e.Code == "NumpadEnter") {  
        }
    }
}