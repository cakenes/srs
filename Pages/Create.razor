@page "/Create"

@using Srs.Data
@inject Srs.Service Service
@inject Srs.ServiceData ServiceData
@inject NavigationManager Navigation

<div class="container">
	<div class="row justify-content-center">

		<!-- Deck -->
		<div class="col" align="center">
			<span class="text-bold-large">Deck</span>

			<!-- Notification -->
			<div class="row justify-content-center">
                @if (createMsgTitle != null)
            	{	
                <div class="ml-5 alert @createMsgType text-light-small width-full alert-dismissible fade show mr-5" role="alert" align="center">
                    <strong>@createMsgTitle</strong><br>@createMsg
                    <button type="button" class="close btn-sm" @onclick="(()=>SetCreateNotification())" aria-label="Close">&times;</button>
                </div>
            	}
			</div>

			<!-- Name -->
			<div class="input-group input-group-sm">
	 			<div class="input-group-prepend">
    				<span class="input-group-text bi bi-stack"></span>
    			</div>
				<input type="text" class="form-control text-light-small" placeholder="Name" @bind="newDeck.Name" aria-label="Deck name">
			</div>

			<!-- User -->
			<div class="input-group input-group-sm mt-2">
				<div class="input-group-prepend">
			    	<span class="input-group-text bi bi-people-fill"></span>
			    </div>
				<input type="text" class="form-control text-light-small rounded-right" placeholder="Users" disabled>

				<!-- User tooltip -->
  				<button class="btn btn-list dropdown tooltip-inlay" tabindex="-1"> 
					<div class="dropdown">
						<div class="dropdown-menu tooltip-left">
							<span class="dropdown-item text-tooltip disabled">!! Currently disabled !!</span>
							<span class="dropdown-item text-tooltip disabled">Seperate multiple users with comma</span>
							<span class="dropdown-item text-tooltip disabled">(e.g. user1,user2)</span>
						</div>
					</div>
					<span class="dropdown bi bi-question-circle"></span>
				</button>
			</div>

			<!-- Password -->
			<div class="input-group input-group-sm mt-2">
	 			<div class="input-group-prepend">
    				<span class="input-group-text bi bi-lock-fill"></span>
    			</div>
				<input type="text" class="form-control text-light-small rounded-right" placeholder="Password" @bind="newDeck.Password" disabled>
				
				<!-- Password tooltip -->
  				<button class="btn btn-list dropdown tooltip-inlay" tabindex="-1"> 
					<div class="dropdown">
						<div class="dropdown-menu tooltip-left">
							<span class="dropdown-item text-tooltip disabled">!! Currently disabled !!</span>
							<span class="dropdown-item text-tooltip disabled">Password required to open deck</span>
						</div>
					</div>
					<span class="dropdown bi bi-question-circle"></span>
				</button>
			</div>

			<!-- Create -->
			<div class="row justify-content-center">
				@if (newDeck.Id == 0) { <button class="btn text-bold-medium hover-green" type="button" @onclick="(() => CreateDeck())">Create Deck</button> }
				else { <button class="btn text-bold-medium hover-green" type="button" @onclick="(() => ModifyDeck())">Modify Deck</button> } 
			</div>
		</div>

		<!-- Card -->
		<div class="col" align="center">
			<span class="text-bold-large">Card</span>

			<!-- Card front -->
			<div class="input-group input-group-sm">
				<textarea class="form-control text-light-small text-center rounded-right" maxlength="100" rows="3" placeholder="Front of the card" @bind="newCard.Front" @bind:event="oninput"></textarea>

				<!-- Front tooltip -->
  				<button class="btn btn-list dropdown tooltip-inlay" tabindex="-1"> 
					<div class="dropdown">
						<div class="dropdown-menu tooltip-left">
							<span class="dropdown-item text-tooltip disabled">Front of the card</span>
							<span class="dropdown-item text-tooltip disabled">Limited currently to 100 characters</span>
						</div>
					</div>
					<span class="dropdown bi bi-question-circle"></span>
				</button>
			</div>

			<!-- Card back -->
			<div class="input-group  input-group-sm mt-2">
				<textarea class="form-control text-light-small text-center rounded-right" maxlength="20" rows="3" placeholder="Back of the card" @bind="newCard.Back" @bind:event="oninput" @onkeydown="Enter"></textarea>

				<!-- Back tooltip -->
  				<button class="btn btn-list dropdown tooltip-inlay" tabindex="-1"> 
					<div class="dropdown">
						<div class="dropdown-menu tooltip-left">
							<span class="dropdown-item text-tooltip disabled">Back of the card</span>
							<span class="dropdown-item text-tooltip disabled">Limited currently to 20 characters</span>
						</div>
					</div>
					<span class="dropdown bi bi-question-circle"></span>
				</button>
			</div>

			<!-- Card action -->
			<div class="row justify-content-center mb-5">
				<button class="btn text-bold-medium hover-green" type="button" @onclick="(() => SaveCard())">Save Card</button>
			</div>
		</div>
	</div>

	<!-- Search -->
	<div class="row">
		<div class="input-group justify-content-center">
			<input type="search" class="form-control text-light-medium text-black" placeholder="What are you looking for?" @bind-value="deckSearch" @bind-value:event="oninput" aria-label="Search">
		</div>
	</div>

	<!-- Table -->
	<div class="row justify-content-center mt-2">
		<table class="table table-new table-sm">
			<colgroup>
				<col span="1" style="width: 45%;">
       			<col span="1" style="width: 45%;">
				<col span="1" style="width: 10%;"> 
			</colgroup>

			<!-- Sort -->
			<thead>
				<tr>

				<!-- Sort by front -->
      				<th scope="col">
						<div class="btn-group" role="group" aria-label="Sort by Front">
							@if (listSort == 1 || listSort == 2) {
								<button class="btn text-bold-medium text-blue text-left no-wrap" @onclick="(() => ToggleSort(1))" type="button">
									<span class="hover-blue">Front</span>
									@if (listSort == 1) { <span class="bi bi-sort-alpha-down"></span> }
									else if (listSort == 2) { <span class="bi bi-sort-alpha-up"></span> }
								</button>
							}
							else {
								<button class="btn text-bold-medium text-left no-wrap" @onclick="(() => ToggleSort(1))" type="button">
									<span class="hover-blue">Front</span>
									<span class="bi bi-sort-alpha-up text-invis"></span>
								</button>
							}
						</div>
					</th>

					<!-- Sort by back -->
      				<th scope="col">
						<div class="btn-group" role="group" aria-label="Sort by Back">
							@if (listSort == 3 || listSort == 4) {
								<button class="btn text-bold-medium text-blue text-left no-wrap" @onclick="(() => ToggleSort(3))" type="button">
									<span class="hover-blue">Back</span>
									@if (listSort == 3) { <span class="bi bi-sort-alpha-down"></span> }
									else if (listSort == 4) { <span class="bi bi-sort-alpha-up"></span> }
								</button>
							}
							else {
								<button class="btn text-bold-medium text-left no-wrap" @onclick="(() => ToggleSort(3))" type="button">
									<span class="hover-blue">Back</span>
									<span class="bi bi-sort-alpha-up text-invis"></span>
								</button>
							}
						</div>
					</th>

					<!-- Action -->
					<th scope="col" class="text-center">
						<span class="btn text-bold-medium no-wrap">Action</span>
					</th>
				</tr>
			</thead>

			<!-- List -->
			<tbody>
				@if (sortedList == null) { ToggleSort(-1); }
				@foreach (Card item in sortedList)
				{

					// Search
					if (!item.Front.Contains(deckSearch, StringComparison.CurrentCultureIgnoreCase) && 
						!item.Back.Contains(deckSearch, StringComparison.CurrentCultureIgnoreCase)) continue;

					<tr>
		    			<td class="text-light-small text-black text-left overflow-hidden">@item.Front</td>
      					<td class="text-light-small text-black text-left overflow-hidden">@item.Back</td>
     					<td class="text-right">
							<div class="btn-group" role="group">

								<!-- Edit -->
								<button class="btn btn-list dropdown" @onclick="(() => EditCard(item))" tabindex="-1"> 
									<div class="dropdown">
										<div class="dropdown-menu tooltip-left">
											<span class="dropdown-item text-tooltip disabled">Edit</span>
										</div>
									</div>
									<img src="svg/Edit.svg" alt="" width="16" height="16">
								</button>

								<!-- Delete -->
								<button class="btn btn-list dropdown" @onclick="(() => DeleteCard(item))" tabindex="-1"> 
									<div class="dropdown">
										<div class="dropdown-menu tooltip-left">
											<span class="dropdown-item text-tooltip disabled">Delete</span>
										</div>
									</div>
									<img src="svg/Delete.svg" alt="" width="16" height="16">
								</button>
							</div>
						</td>
    				</tr>
				}
  			</tbody>
		</table>
	</div>
</div>

@code
{
	private int listSort, editCard;
	private string createMsgTitle, createMsg, createMsgType;
	private string deckSearch = "";
	private DeckFull newDeck;
	private Data.Card newCard;
	private List<Card> sortedList;
	
	private void ToggleSort(int input) {
		if (listSort == 0) listSort = input;
		else if (listSort == input) listSort += 1;
		else if (listSort == input + 1) listSort = 0;
		else if (input != -1) listSort = input;

		switch (listSort) {
			case 0: sortedList = newDeck.Cards.Values.ToList(); break;
			case 1: sortedList = newDeck.Cards.Values.OrderBy(x => x.Front).ToList(); break;
			case 2: sortedList = newDeck.Cards.Values.OrderByDescending(x => x.Front).ToList(); break;
			case 3: sortedList = newDeck.Cards.Values.OrderBy(x => x.Front).ToList(); break;
			case 4: sortedList = newDeck.Cards.Values.OrderByDescending(x => x.Front).ToList(); break;
			default: sortedList = newDeck.Cards.Values.ToList(); break;
		}
	}

	private void SetCreateNotification(string title = null, string msg = null, string type = "warning") {
        createMsgTitle = title;
        createMsg = msg;
        createMsgType = "alert-" + type;
    }

	private void SaveCard() {
		if (newDeck.Cards.Count == 0) { newCard.Id = 1; newDeck.Cards.Add(newCard.Id, newCard); }
		else if (newCard.Id == 0) { newCard.Id = newDeck.Cards.Keys.Last() + 1; newDeck.Cards.Add(newCard.Id, newCard); }
		else { newDeck.Cards[editCard] = newCard; }
		newCard = new Data.Card();
		ToggleSort(-1);
	}

	private void EditCard(Data.Card card) {
		editCard = card.Id;
		newCard = card;
		ToggleSort(-1);
	}

	private void DeleteCard(Data.Card card) {
		newDeck.Cards.Remove(card.Id);
		ToggleSort(-1);
	}

	private async Task CreateDeck() {
		Data.ReturnInfo info = await Service.CreateDeckAsync(ServiceData, newDeck);
		SetCreateNotification("Create deck", info.Message, info.Type);
		if (info.Success) newDeck = new Data.DeckFull { Cards = new SortedDictionary<int, Card>() };
		ToggleSort(-1);
	}

	private async Task ModifyDeck() {
		Data.ReturnInfo info = await Service.ModifyDeckAsync(ServiceData, newDeck);
		SetCreateNotification("Modify deck", info.Message, info.Type);
		if (info.Success) newDeck = new Data.DeckFull { Cards = new SortedDictionary<int, Card>() };
		ToggleSort(-1);
	}

	// Enter to save card
    private void Enter(KeyboardEventArgs e) {
        if ((e.Code == "Enter" || e.Code == "NumpadEnter") && e.ShiftKey == false) SaveCard();
    }

	private Task Initialize() {
		if (ServiceData.UserId == null) Navigation.NavigateTo("/");
		newDeck = ServiceData.Deck;
		newCard = new Data.Card();
		return Task.CompletedTask;
	}

	protected override async Task OnInitializedAsync() {
		await Initialize();
	}
}